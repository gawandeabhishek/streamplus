generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionStatus {
  FREE
  BASIC
  PREMIUM
  FAMILY
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String?           @unique
  emailVerified      DateTime?
  image              String?
  subscriptionStatus SubscriptionStatus @default(FREE)
  stripeCustomerId   String?           @unique
  accounts           Account[]
  sessions           Session[]
  activities         Activity[]
  sentFriendRequests Friend[]          @relation("SentFriendRequests")
  receivedFriendRequests Friend[]      @relation("ReceivedFriendRequests")
  sentMessages       Message[]         @relation("SentMessages")
  initiatedConversations Conversation[] @relation("UserConversations")
  receivedConversations  Conversation[] @relation("FriendConversations")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  title     String
  thumbnail String
  type      String   // WATCHED, LIKED, etc.
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("SentFriendRequests", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("ReceivedFriendRequests", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([conversationId])
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  initiator User      @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)
  receiver  User      @relation("FriendConversations", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
} 